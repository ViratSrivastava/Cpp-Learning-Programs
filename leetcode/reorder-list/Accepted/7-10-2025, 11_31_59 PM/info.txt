{"id":1693480642,"question_id":143,"lang":"cpp","lang_name":"C++","time":"1 week, 3 days","timestamp":1752170519,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1693480642/","is_pending":"Not Pending","title":"Reorder List","memory":"22.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    void reorderList(ListNode* head) {\n        if (!head || !head->next || !head->next->next) return;\n\n        // Step 1: Find middle\n        ListNode* slow = head;\n        ListNode* fast = head;\n        while (fast->next && fast->next->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        // Step 2: Reverse second half\n        ListNode* prev = nullptr;\n        ListNode* curr = slow->next;\n        while (curr) {\n            ListNode* temp = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = temp;\n        }\n\n        slow->next = nullptr;\n\n        // Step 3: Merge halves\n        ListNode* first = head;\n        ListNode* second = prev;\n        while (second) {\n            ListNode* temp1 = first->next;\n            ListNode* temp2 = second->next;\n\n            first->next = second;\n            second->next = temp1;\n\n            first = temp1;\n            second = temp2;\n        }\n    }\n};","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false,"flag_type":1,"frontend_id":233}