{"id":1298021977,"question_id":420,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1719165594,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1298021977/","is_pending":"Not Pending","title":"Strong Password Checker","memory":"7.1 MB","code":"class Solution {\npublic:\n    int strongPasswordChecker(string password) {\n        int n = password.length();\n        int missing = 3;\n        int lower = 1, upper = 1, digit = 1;\n        \n        // Check for lowercase, uppercase, and digit\n        for (char c : password) {\n            if (islower(c)) lower = 0;\n            else if (isupper(c)) upper = 0;\n            else if (isdigit(c)) digit = 0;\n        }\n        missing = lower + upper + digit;\n        \n        // Handle cases where length is less than 6\n        if (n < 6) return max(6 - n, missing);\n        \n        // Count repeating characters\n        vector<int> repeats;\n        int count = 1;\n        for (int i = 1; i <= n; i++) {\n            if (i < n && password[i] == password[i-1]) {\n                count++;\n            } else {\n                if (count >= 3) repeats.push_back(count);\n                count = 1;\n            }\n        }\n        \n        // Handle cases where length is between 6 and 20\n        if (n <= 20) {\n            int replace = 0;\n            for (int rep : repeats) replace += rep / 3;\n            return max(missing, replace);\n        }\n        \n        // Handle cases where length is greater than 20\n        int delete_count = n - 20;\n        int replace = 0;\n        \n        for (int i = 0; i < repeats.size(); i++) {\n            if (delete_count > 0 && repeats[i] % 3 == 0) {\n                repeats[i]--;\n                delete_count--;\n            }\n        }\n        \n        for (int i = 0; i < repeats.size(); i++) {\n            if (delete_count >= 2 && repeats[i] % 3 == 1 && repeats[i] > 3) {\n                repeats[i] -= 2;\n                delete_count -= 2;\n            }\n        }\n        \n        for (int i = 0; i < repeats.size(); i++) {\n            if (delete_count > 0) {\n                int can_delete = min(delete_count, repeats[i] - 2);\n                repeats[i] -= can_delete;\n                delete_count -= can_delete;\n            }\n            replace += repeats[i] / 3;\n        }\n        \n        return (n - 20) + max(missing, replace);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"strong-password-checker","has_notes":false,"flag_type":1,"frontend_id":82}