{"id":1277731798,"question_id":3435,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1717525526,"status":10,"status_display":"Accepted","runtime":"1097 ms","url":"/submissions/detail/1277731798/","is_pending":"Not Pending","title":"Block Placement Queries","memory":"367.3 MB","code":"#include <vector>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nclass Solution {\n    // Method to update spaces when an obstacle is placed\n    void breakSpaces(int pos) {\n        auto it = obstacles.upper_bound(pos);\n        int pos_next = *it;\n        int pos_prev = *prev(it);\n\n        // Remove the original space\n        int orig_size = pos_next - pos_prev;\n        spaces[orig_size].erase(pos_prev);\n        if (spaces[orig_size].empty()) {\n            spaces.erase(orig_size);\n        }\n\n        // Add the new spaces\n        spaces[pos - pos_prev].insert(pos_prev);\n        spaces[pos_next - pos].insert(pos);\n    }\n    \n    // Method to check if there is a sufficient space to place the block\n    bool findSpace(int maxi_dist, int block_size) {\n        auto it = spaces.lower_bound(block_size);\n        while (it != spaces.end()) {\n            set<int> & start_positions = it->second;\n            int first_pos = *start_positions.begin();\n            if (first_pos + block_size <= maxi_dist) {\n                return true;\n            }\n            advance(it, 1);\n        }\n        return false;\n    }\n\n    vector<bool> ans;\n    set<int> obstacles;                // To keep obstacle coordinates in order\n    map<int, set<int>> spaces;         // Keep groups of empty spaces in order: space_size -> set of start indices\n\npublic:\n    vector<bool> getResults(const vector<vector<int>>& queries) {\n        int const nquery = queries.size();\n        ans.reserve(nquery);\n        int maxi_dist = min(5 * 100000, 3 * nquery);\n        obstacles.insert(0);           // Dummy obstacle at the start\n        obstacles.insert(maxi_dist);   // Dummy obstacle at the end\n        spaces[maxi_dist].insert(0);   // Initial space from 0 to maxi_dist\n\n        for (const auto & query : queries) {\n            int op = query[0];\n            if (op == 1) {\n                // Place an obstacle\n                breakSpaces(query[1]);\n                obstacles.insert(query[1]);\n            } else if (op == 2) {\n                // Check if a block can be placed\n                ans.push_back(findSpace(query[1], query[2]));\n            }\n        }\n        \n        return ans;\n    }\n};\n","compare_resulttitle_slug":"block-placement-queries","has_notes":false,"flag_type":1,"frontend_id":38}