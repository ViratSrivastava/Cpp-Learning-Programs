{"id":1632319068,"question_id":1240,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1747092495,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1632319068/","is_pending":"Not Pending","title":"Stone Game II","memory":"15.1 MB","code":"class Solution {\npublic:\n    int stoneGameII(vector<int>& piles) {\n        int n = piles.size();\n\n        // suffixSum[i] = total stones from i to end\n        vector<int> suffixSum(n);\n        suffixSum[n - 1] = piles[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            suffixSum[i] = piles[i] + suffixSum[i + 1];\n        }\n\n        // dp[i][m] = max stones the current player can get from index i with M = m\n        vector<vector<int>> dp(n, vector<int>(n + 1, -1));\n\n        // Recursive function with memoization\n        function<int(int, int)> dfs = [&](int i, int m) -> int {\n            if (i >= n) return 0;           // No more piles left\n            if (dp[i][m] != -1) return dp[i][m]; // Already computed\n\n            int maxStones = 0;\n            for (int x = 1; x <= 2 * m && i + x <= n; ++x) {\n                int opponent = dfs(i + x, max(m, x)); // opponent's best move\n                int current = suffixSum[i] - opponent; // total - opponent = current player\n                maxStones = max(maxStones, current);\n            }\n\n            return dp[i][m] = maxStones;\n        };\n\n        return dfs(0, 1); // Start from index 0, M = 1\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"stone-game-ii","has_notes":false,"flag_type":1,"frontend_id":162}