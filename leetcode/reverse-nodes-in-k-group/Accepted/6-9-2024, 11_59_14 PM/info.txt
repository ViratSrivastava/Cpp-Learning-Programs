{"id":1283107320,"question_id":25,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1717957754,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1283107320/","is_pending":"Not Pending","title":"Reverse Nodes in k-Group","memory":"14.9 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        if (!head || k == 1) return head;\n        \n        // Count the total number of nodes in the list\n        ListNode* curr = head;\n        int count = 0;\n        while (curr) {\n            count++;\n            curr = curr->next;\n        }\n\n        // Dummy node to handle edge cases easily\n        ListNode dummy(0);\n        dummy.next = head;\n        ListNode* prev = &dummy;\n        ListNode* next = nullptr;\n        ListNode* tail = nullptr;\n\n        while (count >= k) {\n            tail = prev->next;\n            curr = tail->next;\n            for (int i = 1; i < k; ++i) {\n                tail->next = curr->next;\n                curr->next = prev->next;\n                prev->next = curr;\n                curr = tail->next;\n            }\n            prev = tail;\n            count -= k;\n        }\n        return dummy.next;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-nodes-in-k-group","has_notes":false,"flag_type":1,"frontend_id":51}