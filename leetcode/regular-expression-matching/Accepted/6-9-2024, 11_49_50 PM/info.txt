{"id":1283099457,"question_id":10,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1717957190,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1283099457/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"8.9 MB","code":"class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int m = s.length();\n        int n = p.length();\n        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));\n\n        // Base case: empty pattern matches empty string\n        dp[0][0] = true;\n\n        // Base case: pattern with '*' can match empty string\n        for (int j = 2; j <= n; j++) {\n            if (p[j - 1] == '*') {\n                dp[0][j] = dp[0][j - 2];\n            }\n        }\n\n        // Fill the dp table\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (p[j - 1] == '*') {\n                    dp[i][j] = dp[i][j - 2] || (dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'));\n                } else if (p[j - 1] == '.' || p[j - 1] == s[i - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n            }\n        }\n\n        return dp[m][n];\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"regular-expression-matching","has_notes":false,"flag_type":1,"frontend_id":49}